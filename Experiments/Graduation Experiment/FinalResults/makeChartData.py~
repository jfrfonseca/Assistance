#!/usr/bin/env python
import pygal, ast

data = '''
(u'1001', u'RNRO', 3.1518437805506774)
(u'1004', u'RNRO', 1.8381546711678312)
(u'101', u'FIFO', 3.688976461962452)
(u'104', u'FIFO', 2.71792598716246)
(u'11', u'SJF', 2.6610409324849877)
(u'1301', u'FIFO', 3.3272256463724554)
(u'1301', u'RNRO', 2.5405404416660207)
(u'1304', u'FIFO', 2.802001747033901)
(u'1304', u'RNRO', 1.9422624102176593)
(u'1801', u'FIFO', 2.958128705240186)
(u'1801', u'RNRO', 2.2494033204247863)
(u'1804', u'FIFO', 1.9877611239251158)
(u'1804', u'RNRO', 1.6013542401421927)
(u'2201', u'FIFO', 3.270541171170291)
(u'2201', u'RNRO', 3.0511363631203063)
(u'2204', u'FIFO', 3.265596730998413)
(u'2204', u'RNRO', 2.464305070630962)
(u'2701', u'FIFO', 2.955287833689903)
(u'2701', u'RNRO', 2.3515238989715326)
(u'2704', u'FIFO', 2.2438083158166364)
(u'2704', u'RNRO', 1.5834983016138222)
(u'3101', u'FIFO', 3.379393982164787)
(u'3101', u'RNRO', 2.903528231381355)
(u'3104', u'FIFO', 4.534544889088227)
(u'3104', u'RNRO', 2.3299143787034082)
(u'3601', u'FIFO', 3.061129487127367)
(u'3601', u'RNRO', 2.4024356609231514)
(u'3604', u'FIFO', 2.26829924513494)
(u'3604', u'RNRO', 1.7208334178111255)
(u'4001', u'RNRO', 2.6962814625079954)
(u'4004', u'RNRO', 2.185722348137577)
(u'401', u'FIFO', 3.156597670359169)
(u'404', u'FIFO', 2.6705165565399698)
(u'4501', u'FIFO', 3.030702895158366)
(u'4501', u'RNRO', 1.9626053854081498)
(u'4504', u'FIFO', 2.2791678874588532)
(u'4504', u'RNRO', 1.7746340269635703)
(u'5401', u'FIFO', 3.161483576226337)
(u'5401', u'RNRO', 1.9698928217231713)
(u'5404', u'FIFO', 2.3971536165330716)
(u'5404', u'RNRO', 1.7534184797452608)
(u'6301', u'FIFO', 3.195553869795063)
(u'6301', u'RNRO', 2.487486529495606)
(u'6304', u'FIFO', 2.748391344028204)
(u'6304', u'RNRO', 1.7743830368837807)
(u'7201', u'FIFO', 3.063811307961152)
(u'7201', u'RNRO', 2.5068621284427746)
(u'7204', u'FIFO', 2.6408224195423786)
(u'7204', u'RNRO', 1.7469464931379497)
(u'8101', u'FIFO', 3.9466291833459657)
(u'8101', u'RNRO', 2.5461113932904658)
(u'8104', u'FIFO', 3.066591012153225)
(u'8104', u'RNRO', 1.7325468712096888)
(u'9001', u'RNRO', 2.2832151178866504)
(u'9004', u'RNRO', 1.7666482191729185)
(u'901', u'FIFO', 2.793715762122441)
(u'904', u'FIFO', 1.9802227332947486)
'''
# Configuration: {Strategy: averageTime}}
dat = {}
configurationsList = []
for toupleLine in data.splitlines()[1:]:
	tpl = ast.literal_eval(toupleLine.replace("\n", ""))
	if tpl[0] not in dat.keys():
		dat[tpl[0]] = {tpl[1]: tpl[2]}
	else:
		dat[tpl[0]][tpl[1]] = tpl[2]

bar_chart = pygal.Bar(width=1200, height=600)
bar_chart.title = 'AVERAGE RESPONSE/PROCESSING TIME PER CONFIGURATION AND SCHEDULING STRATEGY'
bar_chart.x_labels = sorted(dat.keys())
stratData = [[], [], []]
for config in sorted(dat.keys()):
	for index, strat in enumerate(['RNRO', 'FIFO', 'SJF']):
		if strat in dat[config].keys():
			stratData[index].append(dat[config][strat])
		else:
			stratData[index].append(None)
bar_chart.add('RNRO', stratData[0])
bar_chart.add('FIFO', stratData[1])
bar_chart.add('SJF', stratData[2])
bar_chart.render_to_file('responseIprocessing_configuration_strategy.svg')


data = '''
(u'1001', 3.1518437805506774)
(u'1004', 1.8381546711678312)
(u'101', 3.688976461962452)
(u'104', 2.71792598716246)
(u'11', 2.6610409324849877)
(u'1301', 3.08326459841664)
(u'1304', 2.5402930478112564)
(u'1801', 2.863365615280293)
(u'1804', 1.9388686052201947)
(u'2201', 3.1577410361650418)
(u'2204', 2.803818853926347)
(u'2701', 2.795833998535043)
(u'2704', 2.0541089950486606)
(u'3101', 3.007981934825902)
(u'3104', 2.661490947186778)
(u'3601', 2.8024349065440926)
(u'3604', 2.0483877125549497)
(u'4001', 2.6962814625079954)
(u'4004', 2.185722348137577)
(u'401', 3.156597670359169)
(u'404', 2.6705165565399698)
(u'4501', 2.428226263388234)
(u'4504', 2.025046207761523)
(u'5401', 2.308800242061029)
(u'5404', 1.9947422937910182)
(u'6301', 2.682698779135117)
(u'6304', 2.0093502838834514)
(u'7201', 2.631530508673901)
(u'7204', 1.8838990198829957)
(u'8101', 2.648102665308418)
(u'8104', 1.8153715462882352)
(u'9001', 2.2832151178866504)
(u'9004', 1.7666482191729185)
(u'901', 2.793715762122441)
(u'904', 1.9802227332947486)
'''
configsList = []
relationList = []
for toupleLine in data.splitlines()[1:]:
	tpl = ast.literal_eval(toupleLine.replace("\n", ""))
	configsList.append(tpl[0])	
	relationList.append(tpl[1])

data = '''
(u'1001', 18.16249978542328, 5.7625)
(u'1004', 202.27666719754538, 110.04333333333334)
(u'101', 18.740000426769257, 5.08)
(u'104', 153.23666715621948, 56.379999999999995)
(u'11', 18.92000102996826, 7.109999999999999)
(u'1301', 74.79999915758769, 24.26)
(u'1304', 744.3566688696543, 293.02)
(u'1801', 179.45666766166687, 62.673333333333325)
(u'1804', 1674.626665910085, 863.7133333333333)
(u'2201', 75.67000102996826, 23.963333333333328)
(u'2204', 658.3366669019064, 234.80000000000004)
(u'2701', 171.3566657702128, 61.29)
(u'2704', 1613.2766636212666, 785.3899999999995)
(u'3101', 75.37000068028767, 25.05666666666666)
(u'3104', 671.920004526774, 252.46000000000004)
(u'3601', 171.8733328183492, 61.330000000000005)
(u'3604', 1612.8800009886425, 787.3900000000003)
(u'4001', 76.37666622797649, 28.326666666666668)
(u'4004', 709.8133325576782, 324.75)
(u'401', 74.71666685740153, 23.67)
(u'404', 701.3666649659475, 262.6333333333334)
(u'4501', 211.05333272616068, 86.91666666666667)
(u'4504', 1621.35999639829, 800.6533333333335)
(u'5401', 189.68333188692728, 82.15666666666667)
(u'5404', 1628.8666622638702, 816.5800000000003)
(u'6301', 172.16666531562805, 64.17666666666668)
(u'6304', 1643.9633304278057, 818.1566666666671)
(u'7201', 181.16333198547363, 68.84333333333335)
(u'7204', 1618.6899955272675, 859.2233333333335)
(u'8101', 172.60333172480264, 65.17999999999999)
(u'8104', 1631.9766614437103, 898.9766666666668)
(u'9001', 193.15999897321066, 84.60000000000001)
(u'9004', 1627.736669699351, 921.3699999999995)
(u'901', 202.4233317375183, 72.45666666666666)
(u'904', 1673.776664574941, 845.2466666666661)
'''
responseList = []
processingList = []
for toupleLine in data.splitlines()[1:]:
	tpl = ast.literal_eval(toupleLine.replace("\n", ""))
	responseList.append(tpl[1])	
	processingList.append(tpl[2])

bar_chart = pygal.Bar(width=1800, height=600, logarithmic=True)
bar_chart.title = 'AVERAGE RESPONSE, PROCESSING AND RESPONSE/PROCESSING TIME PER CONFIGURATION (LOG SCALE)'
bar_chart.x_labels = configsList
bar_chart.add('RESPONSE TIME', responseList)
bar_chart.add('PROCESSING TIME', processingList)
bar_chart.add('RESPONSE/PROCESSING TIME', relationList, secondary=True)
bar_chart.render_to_file('response&processing&responseIprocessing_configuration.svg')

def sumDigits(value):
	toSum = int(str(value)[:-1])
	total = 0
	while toSum >= 1:
		total += toSum % 10
		toSum /= 10
	return total

for index, config in enumerate(configsList):
	normalizer = sumDigits(config)*(float(str(config)[-1]))
	responseList[index] = float(responseList[index])/normalizer
	processingList[index] = float(processingList[index])/normalizer
	relationList[index] = float(relationList[index])/normalizer

bar_chart = pygal.Bar(width=2000, height=600, logarithmic=True)
bar_chart.title = 'AVERAGE RESPONSE AND PROCESSING TIME PER CONFIGURATION, NORMALIZED PER NUMBER OF SERVERS AND CLIENTS (LOG SCALE)'
bar_chart.x_labels = configsList
bar_chart.add('NORMALIZED RESPONSE TIME', responseList)
bar_chart.add('NORMALIZED PROCESSING TIME', processingList)
# bar_chart.add('NORMALIZED RESPONSE/PROCESSING TIME', relationList, secondary=True)
bar_chart.render_to_file('response&processing&responseIprocessing_configuration_normalized.svg')

